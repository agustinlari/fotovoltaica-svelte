-- Schema fotovoltaica
-- Creates helper function and tables as per app_antigua/Esquema_base_datos.txt

-- Function used by triggers to update updated_at
CREATE OR REPLACE FUNCTION public.actualizar_updated_at()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END;
$$;

-- Camiones
CREATE TABLE IF NOT EXISTS public."Camiones" (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "DNI" TEXT NULL,
  "Matricula" TEXT NULL,
  "UbicacionCampa" TEXT NULL,
  "FechaDescarga" TIMESTAMPTZ NULL,
  "Container" TEXT NULL,
  "Albaran" TEXT NULL,
  "NombreConductor" TEXT NULL,
  updated_at TIMESTAMPTZ NULL DEFAULT now(),
  CONSTRAINT Camiones_pkey PRIMARY KEY (id)
);

-- Trigger for Camiones.updated_at
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trigger_actualizar_updated_at_camiones'
  ) THEN
    CREATE TRIGGER trigger_actualizar_updated_at_camiones
    BEFORE UPDATE ON public."Camiones"
    FOR EACH ROW
    EXECUTE FUNCTION public.actualizar_updated_at();
  END IF;
END$$;

-- Estructura
CREATE TABLE IF NOT EXISTS public."Estructura" (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "DNI" TEXT NULL,
  "Conductor" TEXT NULL,
  "Matricula" TEXT NULL,
  "Proveedor" TEXT NULL,
  "PackingList" TEXT NULL,
  "Albaran" TEXT NULL,
  modified_at TIMESTAMPTZ NULL DEFAULT now(),
  "FechaDescarga" TIMESTAMPTZ NULL,
  CONSTRAINT Estructura_pkey PRIMARY KEY (id)
);

-- Pallets
CREATE TABLE IF NOT EXISTS public."Pallets" (
  id TEXT NOT NULL,
  "Descarga" BIGINT NULL,
  "Defecto" BOOLEAN NULL,
  updated_at TIMESTAMPTZ NULL DEFAULT now(),
  CONSTRAINT Pallets_pkey PRIMARY KEY (id),
  CONSTRAINT Pallets_SN_key UNIQUE (id),
  CONSTRAINT Pallets_Descarga_fkey FOREIGN KEY ("Descarga") REFERENCES "Camiones" (id) ON UPDATE CASCADE ON DELETE SET NULL
);

-- Trigger for Pallets.updated_at
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger WHERE tgname = 'trigger_actualizar_updated_at_pallets'
  ) THEN
    CREATE TRIGGER trigger_actualizar_updated_at_pallets
    BEFORE UPDATE ON public."Pallets"
    FOR EACH ROW
    EXECUTE FUNCTION public.actualizar_updated_at();
  END IF;
END$$;

-- Paneles
CREATE TABLE IF NOT EXISTS public."Paneles" (
  "SN" TEXT NOT NULL,
  "Potencia" DOUBLE PRECISION NULL,
  "SNPallet" TEXT NULL,
  CONSTRAINT Paneles_pkey PRIMARY KEY ("SN"),
  CONSTRAINT Paneles_SN_key UNIQUE ("SN"),
  CONSTRAINT Paneles_SNPallet_fkey FOREIGN KEY ("SNPallet") REFERENCES "Pallets" (id) ON UPDATE CASCADE ON DELETE RESTRICT
);


